# -*- coding: utf-8 -*-
"""Customer Segmentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11uRlDWKjsjHXeKOfzW1AEI_ybM00VRVk

Step-1: Install and Import Libraries
"""

import pandas as pd

import numpy as np

import matplotlib.pyplot as plt

import seaborn as sns

from sklearn.model_selection import train_test_split

from sklearn.preprocessing import LabelEncoder

from sklearn.ensemble import RandomForestClassifier

from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

"""Step-2 : Load Dataset"""

from google.colab import files
uploaded = files.upload()

from google.colab import files
uploaded = files.upload()

from google.colab import files
uploaded = files.upload()

train = pd.read_csv("Train.csv")
test = pd.read_csv("Test.csv")
sample = pd.read_csv("sample_submission.csv")

print("Train Shape:", train.shape)
print("Test Shape:", test.shape)

train.head()

"""Step-3: Data Cleaning"""

print(train.isnull().sum())

train['Work_Experience'].fillna(train['Work_Experience'].median(), inplace=True)

train['Family_Size'].fillna(train['Family_Size'].median(), inplace=True)

train['Ever_Married'].fillna(train['Ever_Married'].mode()[0], inplace=True)

train['Graduated'].fillna(train['Graduated'].mode()[0], inplace=True)

train['Profession'].fillna(train['Profession'].mode()[0], inplace=True)

train['Var_1'].fillna(train['Var_1'].mode()[0], inplace=True)

test['Work_Experience'].fillna(test['Work_Experience'].median(), inplace=True)
test['Family_Size'].fillna(test['Family_Size'].median(), inplace=True)
test['Ever_Married'].fillna(test['Ever_Married'].mode()[0], inplace=True)
test['Graduated'].fillna(test['Graduated'].mode()[0], inplace=True)
test['Profession'].fillna(test['Profession'].mode()[0], inplace=True)
test['Var_1'].fillna(test['Var_1'].mode()[0], inplace=True)

"""Step 4: Encoding Categorical Columns

"""

categorical_cols = ['Gender','Ever_Married','Graduated','Profession','Spending_Score','Var_1']

encoder = LabelEncoder()
for col in categorical_cols:
    train[col] = encoder.fit_transform(train[col])
    test[col] = encoder.fit_transform(test[col])

y = train['Segmentation']

X = train.drop(['Segmentation','ID'], axis=1)

test_data = test.drop(['ID'], axis=1)

"""Step 5: Train-Test Split & Model Training

"""

X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestClassifier(n_estimators=200, random_state=42)

model.fit(X_train, y_train)

y_pred = model.predict(X_val)

print("Accuracy:", accuracy_score(y_val, y_pred))

print("\nClassification Report:\n", classification_report(y_val, y_pred))

sns.heatmap(confusion_matrix(y_val, y_pred), annot=True, fmt='d', cmap="Blues")

plt.show()

""" Step 6: Predict on Test Data

"""

test_predictions = model.predict(test_data)

submission = pd.DataFrame({
    "ID": test['ID'],
    "Segmentation": test_predictions
})

submission.to_csv("submission.csv", index=False)

print(" Submission file created: submission.csv")

""" Step 7: Exploratory Data Analysis (EDA)

"""

import seaborn as sns
import matplotlib.pyplot as plt

"""# 1. Gender vs Segmentation

"""

plt.figure(figsize=(6,4))

sns.countplot(x="Gender", hue="Segmentation", data=train)

plt.title("Gender vs Segmentation")

plt.show()

"""# 2. Ever Married vs Segmentation

"""

plt.figure(figsize=(6,4))
sns.countplot(x="Ever_Married", hue="Segmentation", data=train)
plt.title("Marital Status vs Segmentation")
plt.show()

"""# 3. Graduated vs Segmentation

"""

plt.figure(figsize=(6,4))
sns.countplot(x="Graduated", hue="Segmentation", data=train)
plt.title("Graduated vs Segmentation")
plt.show()

"""# 4. Profession vs Segmentation

"""

plt.figure(figsize=(10,5))
sns.countplot(y="Profession", hue="Segmentation", data=train, order=train['Profession'].value_counts().index)
plt.title("Profession vs Segmentation")
plt.show()

"""# 5. Spending Score vs Segmentation

"""

plt.figure(figsize=(6,4))
sns.countplot(x="Spending_Score", hue="Segmentation", data=train)
plt.title("Spending Score vs Segmentation")
plt.show()

"""# 6. Age distribution by Segmentation

"""

plt.figure(figsize=(8,5))
sns.boxplot(x="Segmentation", y="Age", data=train)
plt.title("Age Distribution by Segmentation")
plt.show()

"""# 7. Family Size distribution by Segmentation

"""

plt.figure(figsize=(8,5))
sns.boxplot(x="Segmentation", y="Family_Size", data=train)
plt.title("Family Size Distribution by Segmentation")
plt.show()