# -*- coding: utf-8 -*-
"""Employee Attrition .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bnOAT-_ZOQHbAjzOIIgFCU-qXzVqJgXr

# Step 1: Import libraries
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""# Step 2: Load dataset

"""

from google.colab import files
uploaded = files.upload()

"""# Step 3: Basic info

"""

df = pd.read_csv('employee_attrition (1).csv')

print(df.shape)
print(df.head())
print(df['Attrition'].value_counts())

"""# Step 4: Attrition distribution

"""

sns.countplot(x="Attrition", data=df)
plt.title("Employee Attrition Count")
plt.show()

"""# Step 5: Gender vs Attrition

"""

sns.countplot(x="Gender", hue="Attrition", data=df)
plt.title("Attrition by Gender")
plt.show()

"""# Step 6: Department vs Attrition

"""

plt.figure(figsize=(8,5))
sns.countplot(x="Department", hue="Attrition", data=df)
plt.title("Attrition by Department")
plt.xticks(rotation=45)
plt.show()

"""# Step 7: Overtime vs Attrition

"""

sns.countplot(x="OverTime", hue="Attrition", data=df)
plt.title("Attrition by Overtime")
plt.show()

"""# Step 8: Monthly Income distribution by Attrition

"""

plt.figure(figsize=(8,5))
sns.boxplot(x="Attrition", y="MonthlyIncome", data=df)
plt.title("Attrition vs Monthly Income")
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score

df_encoded = df.copy()
for col in df_encoded.select_dtypes(include=['object']).columns:
    df_encoded[col] = LabelEncoder().fit_transform(df_encoded[col])

X = df_encoded.drop("Attrition", axis=1)

y = df_encoded["Attrition"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestClassifier(random_state=42)

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))

print(classification_report(y_test, y_pred))